class McCullochPittsNeuron:
    def _init_(self, weights, threshold):
        self.weights = weights
        self.threshold = threshold

    def activate(self, inputs):
        weighted_sum = sum([inputs[i] * self.weights[i] for i in range(len(inputs))])
        return 1 if weighted_sum >= self.threshold else 0

# AND-NOT Logic Function
and_not_weights = [1, -1]
and_not_threshold = 1
and_not_neurons = McCullochPittsNeuron(and_not_weights, and_not_threshold)

input_values_and = [(0, 0), (0, 1), (1, 0), (1, 1)]
print("AND-NOT Logic Function:")
for inputs in input_values_and:
    output = and_not_neurons.activate(inputs)
    print(f"Input: {inputs}, Output: {output}")

# NAND Logic Function
nand_weights = [-1, -1]
nand_threshold = -1
nand_neurons = McCullochPittsNeuron(nand_weights, nand_threshold)

# OR Logic Function
or_weights = [1, 1]
or_threshold = 1
or_neurons = McCullochPittsNeuron(or_weights, or_threshold)

# XOR Logic Function
xor_weights = [1, 1]
xor_threshold = 2
xor_neurons = McCullochPittsNeuron(xor_weights, xor_threshold)

# Test XOR logic function
input_values_xor = [(0, 0), (0, 1), (1, 0), (1, 1)]
print("XOR Logic Function:")
for inputs in input_values_xor:
    nand_result = nand_neurons.activate(inputs)
    or_result = or_neurons.activate(inputs)
    
    # Pass the combined result to the XOR neuron
    output = xor_neurons.activate((nand_result, or_result))
    
    print(f"Input: {inputs}, Output: {output}")

